!function(e){function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var t={};n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}(t(1))},function(e,n,t){"use strict";function o(e,n,t){window.close()}function a(e,n,t){for(var o,a=e.pageObjectBindingId,r=0;r<t.mapElementInvokeRequest.pageRequest.pageComponentInputResponses.length;r++){var u=t.mapElementInvokeRequest.pageRequest.pageComponentInputResponses[r];if(u.pageComponentId===a){o=u;break}}if(o){var c=o.contentValue;window.open(c,"_blank")}else alert("failed to get uri - pageObjectBindingId not found in pageComponentInputResponses")}function r(e,n,t){window.print()}function u(e,n){if(manywho.OutcomeManager&&manywho.OutcomeManager.selectedOutcome&&manywho.OutcomeManager.selectedOutcome.attributes)for(var t in manywho.OutcomeManager.selectedOutcome.attributes)if(manywho.OutcomeManager.handlers[t]&&"true"===manywho.OutcomeManager.selectedOutcome.attributes[t]){manywho.OutcomeManager.handlers[t];manywho.OutcomeManager.handlers[t](manywho.OutcomeManager.selectedOutcome,e,manywho.OutcomeManager.originalRequest)}}function c(e,n){if(n){manywho.OutcomeManager.originalRequest=n,manywho.OutcomeManager.stateId=n.stateId;var t=n.mapElementInvokeRequest.selectedOutcomeId;if(manywho.OutcomeManager.tenantId&&manywho.OutcomeManager.stateId&&t){var o=manywho.OutcomeManager.tenantId+"___"+manywho.OutcomeManager.stateId;manywho.OutcomeManager.selectedOutcome=manywho.model.getOutcome(t,o)}}else manywho.OutcomeManager.originalRequest=null,manywho.OutcomeManager.stateId="",manywho.OutcomeManager.selectedOutcome=null}var m=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function o(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}();Object.defineProperty(n,"__esModule",{value:!0});var s=t(2),i=manywho.utils.parseQueryString(window.location.search.substring(1)),l=i["tenant-id"];l||(l=window.location.pathname.split("/").filter(function(e){return e&&e.length>0})[0]),manywho.OutcomeManager={},manywho.OutcomeManager.tenantId=l,manywho.OutcomeManager.originalRequest,manywho.OutcomeManager.handlers={},manywho.OutcomeManager.handlers.AutoClose=o,manywho.OutcomeManager.handlers.AutoOpen=a,manywho.OutcomeManager.handlers.ForcePrint=r;for(var h in manywho.OutcomeHandlers)manywho.OutcomeManager.handlers[h]=manywho.OutcomeHandlers[h];manywho.CustomComponentOrchestrator?(manywho.CustomComponentOrchestrator.onBeforeSendHandlers.push(c),manywho.CustomComponentOrchestrator.doneSendHandlers.push(u)):manywho.settings.initialize({},{invoke:{beforeSend:c,done:u}});var p=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return m(n,e),n}(s.Component);manywho.component.register("OutcomeManager",p),n.default=p},function(e,n){e.exports=React}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,