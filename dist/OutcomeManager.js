!function(e){function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}(n(1))},function(e,t,n){"use strict";function o(e,t,n){window.close()}function a(e,t,n){var o=e.attributes.AutoNavUrl||"";if(o&&o.length>0){window.open(o,"_self")}else alert("No AutoNavUrl specified in the outcome's attributes")}function r(e,t,n){var o=e.attributes.AutoOpenUrl||"";if(o&&o.length>0){window.open(o,"_blank")}else alert("No AutoOpenUrl specified in the outcome's attributes")}function u(e,t,n){window.print()}function c(e,t){if(manywho.OutcomeManager&&manywho.OutcomeManager.selectedOutcome&&manywho.OutcomeManager.selectedOutcome.attributes)for(var n in manywho.OutcomeManager.selectedOutcome.attributes)if(manywho.OutcomeManager.handlers[n]&&"true"===manywho.OutcomeManager.selectedOutcome.attributes[n]){manywho.OutcomeManager.handlers[n];manywho.OutcomeManager.handlers[n](manywho.OutcomeManager.selectedOutcome,e,manywho.OutcomeManager.originalRequest)}}function m(e,t){if(t){manywho.OutcomeManager.originalRequest=t,manywho.OutcomeManager.stateId=t.stateId;var n=t.mapElementInvokeRequest.selectedOutcomeId;if(manywho.OutcomeManager.tenantId&&manywho.OutcomeManager.stateId&&n){var o=manywho.OutcomeManager.tenantId+"___"+manywho.OutcomeManager.stateId;manywho.OutcomeManager.selectedOutcome=manywho.model.getOutcome(n,o)}}else manywho.OutcomeManager.originalRequest=null,manywho.OutcomeManager.stateId="",manywho.OutcomeManager.selectedOutcome=null}var i=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),l=manywho.utils.parseQueryString(window.location.search.substring(1)),h=l["tenant-id"];h||(h=window.location.pathname.split("/").filter(function(e){return e&&e.length>0})[0]),manywho.OutcomeManager={},manywho.OutcomeManager.tenantId=h,manywho.OutcomeManager.originalRequest,manywho.OutcomeManager.handlers={},manywho.OutcomeManager.handlers.AutoClose=o,manywho.OutcomeManager.handlers.AutoOpen=r,manywho.OutcomeManager.handlers.AutoNav=a,manywho.OutcomeManager.handlers.ForcePrint=u;for(var O in manywho.OutcomeHandlers)manywho.OutcomeManager.handlers[O]=manywho.OutcomeHandlers[O];manywho.CustomComponentOrchestrator?(manywho.CustomComponentOrchestrator.onBeforeSendHandlers.push(m),manywho.CustomComponentOrchestrator.doneSendHandlers.push(c)):manywho.settings.initialize({},{invoke:{beforeSend:m,done:c}});var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t}(s.Component);manywho.component.register("OutcomeManager",d),t.default=d},function(e,t){e.exports=React}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,