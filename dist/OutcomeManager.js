!function(e){function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}(t(1))},function(e,n,t){"use strict";function a(e,n,t){window.close()}function o(e,n,t){var a=e.attributes.AutoNavUrl||"";if(a&&a.length>0){window.open(a,"_self")}else alert("No AutoNavUrl specified in the outcome's attributes")}function r(e,n,t){var a=e.attributes.AutoOpenUrl||"";if(a&&a.length>0){window.open(a,"_blank")}else alert("No AutoOpenUrl specified in the outcome's attributes")}function u(e,n,t){window.print()}function i(e,n){if(manywho.OutcomeManager&&manywho.OutcomeManager.selectedOutcome&&manywho.OutcomeManager.selectedOutcome.attributes)for(var t in manywho.OutcomeManager.selectedOutcome.attributes)if(manywho.OutcomeManager.handlers[t]&&"true"===manywho.OutcomeManager.selectedOutcome.attributes[t]){manywho.OutcomeManager.handlers[t];manywho.OutcomeManager.handlers[t](manywho.OutcomeManager.selectedOutcome,e,manywho.OutcomeManager.originalRequest)}}function c(e,n){if(n){manywho.OutcomeManager.originalRequest=n,manywho.OutcomeManager.stateId=n.stateId;var t=n.mapElementInvokeRequest.selectedOutcomeId;if(manywho.OutcomeManager.tenantId&&manywho.OutcomeManager.stateId&&t){var a=manywho.OutcomeManager.tenantId+"___"+manywho.OutcomeManager.stateId;manywho.OutcomeManager.selectedOutcome=manywho.model.getOutcome(t,a)}}else manywho.OutcomeManager.originalRequest=null,manywho.OutcomeManager.stateId="",manywho.OutcomeManager.selectedOutcome=null}var m=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function a(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(a.prototype=t.prototype,new a)}}();Object.defineProperty(n,"__esModule",{value:!0});var s=t(2),h=manywho.utils.parseQueryString(window.location.search.substring(1)),l=h["tenant-id"];l||(l=window.location.pathname.split("/").filter(function(e){return e&&e.length>0})[0]),manywho.OutcomeManager={},manywho.OutcomeManager.tenantId=l,manywho.OutcomeManager.originalRequest,manywho.OutcomeManager.handlers={},manywho.OutcomeManager.handlers.AutoClose=a,manywho.OutcomeManager.handlers.AutoOpen=r,manywho.OutcomeManager.handlers.AutoNav=o,manywho.OutcomeManager.handlers.ForcePrint=u;for(var f in manywho.OutcomeHandlers)manywho.OutcomeManager.handlers[f]=manywho.OutcomeHandlers[f];manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners=[],manywho.eventManager.doneListeners=[],manywho.eventManager.failListeners=[],manywho.eventManager.beforeSend=function(e,n){manywho.eventManager.beforeSendListeners.forEach(function(t){return t(e,n)})},manywho.eventManager.done=function(e,n){manywho.eventManager.doneListeners.forEach(function(t){return t(e,n)})},manywho.eventManager.fail=function(e,n){manywho.eventManager.failListeners.forEach(function(t){return t(e,n)})},manywho.eventManager.addBeforeSendListener=function(e){manywho.eventManager.beforeSendListeners.push(e)},manywho.eventManager.addDoneListener=function(e){manywho.eventManager.doneListeners.push(e)},manywho.eventManager.addFailListener=function(e){manywho.eventManager.failListeners.push(e)},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}})),manywho.eventManager.addBeforeSendListener(c),manywho.eventManager.addDoneListener(i);var d=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return m(n,e),n}(s.Component);manywho.component.register("OutcomeManager",d),n.default=d},function(e,n){e.exports=React}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,