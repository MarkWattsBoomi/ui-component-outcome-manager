!function(e){function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}var t={};n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(e){for(var t in e)n.hasOwnProperty(t)||(n[t]=e[t])}(t(1))},function(e,n,t){"use strict";function o(e,n,t){window.close()}function a(e,n,t){for(var o,a=e.pageObjectBindingId,r=0;r<t.mapElementInvokeRequest.pageRequest.pageComponentInputResponses.length;r++){var u=t.mapElementInvokeRequest.pageRequest.pageComponentInputResponses[r];if(u.pageComponentId===a){o=u;break}}if(o){var c=o.contentValue;window.open(c,"_blank")}else alert("failed to get uri - pageObjectBindingId not found in pageComponentInputResponses")}function r(e,n,t){window.print()}function u(e,n){if(manywho.OutcomeManager&&manywho.OutcomeManager.selectedOutcome&&manywho.OutcomeManager.selectedOutcome.attributes)for(var t in manywho.OutcomeManager.selectedOutcome.attributes)if(manywho.OutcomeManager.handlers[t]&&"true"===manywho.OutcomeManager.selectedOutcome.attributes[t]){manywho.OutcomeManager.handlers[t];manywho.OutcomeManager.handlers[t](manywho.OutcomeManager.selectedOutcome,e,manywho.OutcomeManager.originalRequest)}}function c(e,n){manywho.OutcomeManager.originalRequest=n,manywho.OutcomeManager.stateId=n.stateId;var t=n.mapElementInvokeRequest.selectedOutcomeId;if(manywho.OutcomeManager.tenantId&&manywho.OutcomeManager.stateId&&t){var o=manywho.OutcomeManager.tenantId+"___"+manywho.OutcomeManager.stateId;manywho.OutcomeManager.selectedOutcome=manywho.model.getOutcome(t,o)}}var m=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])};return function(n,t){function o(){this.constructor=n}e(n,t),n.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}}();Object.defineProperty(n,"__esModule",{value:!0});var s=t(2),i=manywho.utils.parseQueryString(window.location.search.substring(1)),l=i["tenant-id"];l||(l=window.location.pathname.split("/").filter(function(e){return e&&e.length>0})[0]),manywho.OutcomeManager={},manywho.OutcomeManager.tenantId=l,manywho.OutcomeManager.originalRequest,manywho.OutcomeManager.handlers={},manywho.OutcomeManager.handlers.AutoClose=o,manywho.OutcomeManager.handlers.AutoOpen=a,manywho.OutcomeManager.handlers.ForcePrint=r;for(var p in manywho.OutcomeHandlers)manywho.OutcomeManager.handlers[p]=manywho.OutcomeHandlers[p];manywho.CustomComponentOrchestrator?(manywho.CustomComponentOrchestrator.onBeforeSendHandlers.push(c),manywho.CustomComponentOrchestrator.doneSendHandlers.push(u)):manywho.settings.initialize({},{invoke:{beforeSend:c,done:u}});var h=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return m(n,e),n}(s.Component);manywho.component.register("OutcomeManager",h),n.default=h},function(e,n){e.exports=React}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vT3V0Y29tZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDM2NDhmMjY2YjgyZTJkMjBiZThhIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL091dGNvbWVNYW5hZ2VyLnRzeCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdFwiIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ2YWx1ZSIsIk9NYXV0b0Nsb3NlIiwib3V0Y29tZSIsInhociIsInJlcXVlc3QiLCJ3aW5kb3ciLCJjbG9zZSIsIk9NYXV0b09wZW4iLCJyZXNwb25zZSIsInRyaWdnZXJDb21wb25lbnQiLCJwYWdlT2JqZWN0QmluZGluZ0lkIiwicG9zIiwibWFwRWxlbWVudEludm9rZVJlcXVlc3QiLCJwYWdlUmVxdWVzdCIsInBhZ2VDb21wb25lbnRJbnB1dFJlc3BvbnNlcyIsImxlbmd0aCIsIml0ZW0iLCJwYWdlQ29tcG9uZW50SWQiLCJ0YXJnZXRVcmkiLCJjb250ZW50VmFsdWUiLCJvcGVuIiwiYWxlcnQiLCJPTWZvcmNlUHJpbnQiLCJwcmludCIsIk9NZG9uZUhhbmRsZXIiLCJtYW55d2hvIiwiT3V0Y29tZU1hbmFnZXIiLCJzZWxlY3RlZE91dGNvbWUiLCJhdHRyaWJ1dGVzIiwia2V5IiwiaGFuZGxlcnMiLCJvcmlnaW5hbFJlcXVlc3QiLCJPTWJlZm9yZVNlbmRIYW5kbGVyIiwic3RhdGVJZCIsIm91dGNvbWVJZCIsInNlbGVjdGVkT3V0Y29tZUlkIiwidGVuYW50SWQiLCJmbG93S2V5IiwibW9kZWwiLCJnZXRPdXRjb21lIiwiX19leHRlbmRzIiwidGhpcyIsImV4dGVuZFN0YXRpY3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJSZWFjdCIsInF1ZXJ5UGFyYW1ldGVycyIsInV0aWxzIiwicGFyc2VRdWVyeVN0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwicGF0aG5hbWUiLCJzcGxpdCIsImZpbHRlciIsInBhdGgiLCJPdXRjb21lSGFuZGxlcnMiLCJDdXN0b21Db21wb25lbnRPcmNoZXN0cmF0b3IiLCJvbkJlZm9yZVNlbmRIYW5kbGVycyIsInB1c2giLCJkb25lU2VuZEhhbmRsZXJzIiwic2V0dGluZ3MiLCJpbml0aWFsaXplIiwiaW52b2tlIiwiYmVmb3JlU2VuZCIsImRvbmUiLCJfc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsIkNvbXBvbmVudCIsImNvbXBvbmVudCIsInJlZ2lzdGVyIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0E0QkFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsU0FBQVAsRUFBQVEsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVYsRUFBQVEsSUFDQUcsT0FBQUMsZUFBQVosRUFBQVEsR0FDQUss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Z2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xyXG52YXIgcXVlcnlQYXJhbWV0ZXJzID0gbWFueXdoby51dGlscy5wYXJzZVF1ZXJ5U3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcclxudmFyIHRlbmFudElkID0gcXVlcnlQYXJhbWV0ZXJzWyd0ZW5hbnQtaWQnXTtcclxuaWYgKCF0ZW5hbnRJZCkge1xyXG4gICAgdGVuYW50SWQgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcclxuICAgICAgICAuc3BsaXQoJy8nKVxyXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDA7XHJcbiAgICB9KVswXTtcclxufVxyXG4vL2RlY2xhcmUgZ2xvYmFsIHsgaW50ZXJmYWNlIFdpbmRvdyB7T3V0Y29tZU1hbmFnZXI6IGFueTt9fVxyXG5tYW55d2hvLk91dGNvbWVNYW5hZ2VyID0ge307XHJcbm1hbnl3aG8uT3V0Y29tZU1hbmFnZXIudGVuYW50SWQgPSB0ZW5hbnRJZDtcclxubWFueXdoby5PdXRjb21lTWFuYWdlci5vcmlnaW5hbFJlcXVlc3Q7XHJcbm1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuaGFuZGxlcnMgPSB7fTtcclxubWFueXdoby5PdXRjb21lTWFuYWdlci5oYW5kbGVyc1tcIkF1dG9DbG9zZVwiXSA9IE9NYXV0b0Nsb3NlO1xyXG5tYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW1wiQXV0b09wZW5cIl0gPSBPTWF1dG9PcGVuO1xyXG5tYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW1wiRm9yY2VQcmludFwiXSA9IE9NZm9yY2VQcmludDtcclxuZm9yICh2YXIga2V5IGluIG1hbnl3aG8uT3V0Y29tZUhhbmRsZXJzKSB7XHJcbiAgICBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW2tleV0gPSBtYW55d2hvLk91dGNvbWVIYW5kbGVyc1trZXldO1xyXG59XHJcbi8vIHRoaXMgYXR0YWNoZXMgdGhlIEFqYXggaGFuZGxlcnMgdG8gdGhlIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yIG9yIFxyXG4vLyBpbml0aWFsaXplIGZ1bmN0aW9uIGlmIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yIGlzbnQgZGVmaW5lZC4gIFxyXG5pZiAobWFueXdoby5DdXN0b21Db21wb25lbnRPcmNoZXN0cmF0b3IpIHtcclxuICAgIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yLm9uQmVmb3JlU2VuZEhhbmRsZXJzLnB1c2goT01iZWZvcmVTZW5kSGFuZGxlcik7XHJcbiAgICBtYW55d2hvLkN1c3RvbUNvbXBvbmVudE9yY2hlc3RyYXRvci5kb25lU2VuZEhhbmRsZXJzLnB1c2goT01kb25lSGFuZGxlcik7XHJcbn1cclxuZWxzZSB7XHJcbiAgICBtYW55d2hvLnNldHRpbmdzLmluaXRpYWxpemUoe30sIHtcclxuICAgICAgICBpbnZva2U6IHtcclxuICAgICAgICAgICAgYmVmb3JlU2VuZDogT01iZWZvcmVTZW5kSGFuZGxlcixcclxuICAgICAgICAgICAgZG9uZTogT01kb25lSGFuZGxlclxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIE9NYXV0b0Nsb3NlKG91dGNvbWUsIHhociwgcmVxdWVzdCkge1xyXG4gICAgd2luZG93LmNsb3NlKCk7XHJcbiAgICByZXR1cm47XHJcbn1cclxuZnVuY3Rpb24gT01hdXRvT3BlbihvdXRjb21lLCB4aHIsIHJlcXVlc3QpIHtcclxuICAgIC8vdGhlIG91dGNvbWUncyAucGFnZU9iamVjdEJpbmRpbmdJZCB0ZWxscyB1cyB3aGljaCBjb21wb25lbnQgdHJpZ2dlcmVkIHRoZSBvdXRjb21lIGFuZCBpbnNlcnRlZCB0aGUgZGF0YVxyXG4gICAgdmFyIHRyaWdnZXJDb21wb25lbnQgPSBvdXRjb21lLnBhZ2VPYmplY3RCaW5kaW5nSWQ7XHJcbiAgICAvL2dldCB0aGUgcmVzcG9uc2UgZm9yIHRoZSBjb3JyZWN0IGNvbXBvbmVudFxyXG4gICAgdmFyIHJlc3BvbnNlO1xyXG4gICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5wYWdlUmVxdWVzdC5wYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXMubGVuZ3RoOyBwb3MrKykge1xyXG4gICAgICAgIHZhciBpdGVtID0gcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5wYWdlUmVxdWVzdC5wYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXNbcG9zXTtcclxuICAgICAgICBpZiAoaXRlbS5wYWdlQ29tcG9uZW50SWQgPT09IHRyaWdnZXJDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcmVzcG9uc2UgPSBpdGVtO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0VXJpID0gcmVzcG9uc2UuY29udGVudFZhbHVlO1xyXG4gICAgICAgIHZhciB3bmQgPSB3aW5kb3cub3Blbih0YXJnZXRVcmksIFwiX2JsYW5rXCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoXCJmYWlsZWQgdG8gZ2V0IHVyaSAtIHBhZ2VPYmplY3RCaW5kaW5nSWQgbm90IGZvdW5kIGluIHBhZ2VDb21wb25lbnRJbnB1dFJlc3BvbnNlc1wiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBPTWZvcmNlUHJpbnQob3V0Y29tZSwgeGhyLCByZXF1ZXN0KSB7XHJcbiAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgIHJldHVybjtcclxufVxyXG5mdW5jdGlvbiBPTWRvbmVIYW5kbGVyKHhociwgcmVxdWVzdCkge1xyXG4gICAgLy9jaGVjayBjbG9zZSBmbGFnIGFuZCBpZiBzZXQganVzdCBraWxsIHRoZSB3aW5kb3dcclxuICAgIGlmIChtYW55d2hvLk91dGNvbWVNYW5hZ2VyICYmIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuc2VsZWN0ZWRPdXRjb21lICYmIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuc2VsZWN0ZWRPdXRjb21lLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAvL2xvb3Agb3ZlciBlYWNoIG91dGNvbWUgYW5kIGNhbGwgaXRzIGFzc29jaWF0ZWQgaGFuZGxlciBpbiB0aGUgcGxheWVyIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgIC8vc29tZSBkZWZhdWx0IGNvbW1vbiBvbmVzIHdpbGwgZGVmYXVsdCB0byB0aGUgaGFuZGxlcnMgaW4gIGhlcmUgaWYgbm90LlxyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGlmIChtYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW2tleV0gJiYgbWFueXdoby5PdXRjb21lTWFuYWdlci5zZWxlY3RlZE91dGNvbWUuYXR0cmlidXRlc1trZXldID09PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuaGFuZGxlcnNba2V5XTtcclxuICAgICAgICAgICAgICAgIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuaGFuZGxlcnNba2V5XShtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZSwgeGhyLCBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLm9yaWdpbmFsUmVxdWVzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy90aGlzIHNhdmVzIHRoZSBsYXN0IHNlbGVjdGVkIG91dGNvbWUgaW4gdGhlIE91dGNvbWVNYW5hZ2VyICAgICAgICAgICBcclxuZnVuY3Rpb24gT01iZWZvcmVTZW5kSGFuZGxlcih4aHIsIHJlcXVlc3QpIHtcclxuICAgIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIub3JpZ2luYWxSZXF1ZXN0ID0gcmVxdWVzdDtcclxuICAgIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuc3RhdGVJZCA9IHJlcXVlc3Quc3RhdGVJZDtcclxuICAgIHZhciBvdXRjb21lSWQgPSByZXF1ZXN0Lm1hcEVsZW1lbnRJbnZva2VSZXF1ZXN0LnNlbGVjdGVkT3V0Y29tZUlkO1xyXG4gICAgaWYgKG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIudGVuYW50SWQgJiYgbWFueXdoby5PdXRjb21lTWFuYWdlci5zdGF0ZUlkICYmIG91dGNvbWVJZCkge1xyXG4gICAgICAgIHZhciBmbG93S2V5ID0gbWFueXdoby5PdXRjb21lTWFuYWdlci50ZW5hbnRJZCArIFwiX19fXCIgKyBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnN0YXRlSWQ7XHJcbiAgICAgICAgbWFueXdoby5PdXRjb21lTWFuYWdlci5zZWxlY3RlZE91dGNvbWUgPSBtYW55d2hvLm1vZGVsLmdldE91dGNvbWUob3V0Y29tZUlkLCBmbG93S2V5KTtcclxuICAgIH1cclxufVxyXG52YXIgT3V0Y29tZU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoT3V0Y29tZU1hbmFnZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBPdXRjb21lTWFuYWdlcigpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT3V0Y29tZU1hbmFnZXI7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XHJcbm1hbnl3aG8uY29tcG9uZW50LnJlZ2lzdGVyKCdPdXRjb21lTWFuYWdlcicsIE91dGNvbWVNYW5hZ2VyKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gT3V0Y29tZU1hbmFnZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBPdXRjb21lTWFuYWdlci5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDM2NDhmMjY2YjgyZTJkMjBiZThhIiwiZXhwb3J0ICogZnJvbSAnLi9PdXRjb21lTWFuYWdlcic7XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC50c3giLCJkZWNsYXJlIHZhciBtYW55d2hvOiBhbnk7XHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5cclxudmFyIHF1ZXJ5UGFyYW1ldGVycyA9IG1hbnl3aG8udXRpbHMucGFyc2VRdWVyeVN0cmluZyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XHJcbnZhciB0ZW5hbnRJZCA9IHF1ZXJ5UGFyYW1ldGVyc1sndGVuYW50LWlkJ107XHJcbmlmICghdGVuYW50SWQpIFxyXG57XHJcbiAgICB0ZW5hbnRJZCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcvJylcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhdGgpIFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXRoICYmIHBhdGgubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgICAgIH0pWzBdO1xyXG59XHJcbiAgICBcclxuXHJcbi8vZGVjbGFyZSBnbG9iYWwgeyBpbnRlcmZhY2UgV2luZG93IHtPdXRjb21lTWFuYWdlcjogYW55O319XHJcbm1hbnl3aG8uT3V0Y29tZU1hbmFnZXIgPSB7fTtcclxubWFueXdoby5PdXRjb21lTWFuYWdlci50ZW5hbnRJZCAgPSB0ZW5hbnRJZDtcclxubWFueXdoby5PdXRjb21lTWFuYWdlci5vcmlnaW5hbFJlcXVlc3Q7XHJcbm1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuaGFuZGxlcnMgPSB7fTtcclxubWFueXdoby5PdXRjb21lTWFuYWdlci5oYW5kbGVyc1tcIkF1dG9DbG9zZVwiXSA9IE9NYXV0b0Nsb3NlO1xyXG5tYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW1wiQXV0b09wZW5cIl0gPSBPTWF1dG9PcGVuO1xyXG5tYW55d2hvLk91dGNvbWVNYW5hZ2VyLmhhbmRsZXJzW1wiRm9yY2VQcmludFwiXSA9IE9NZm9yY2VQcmludDtcclxuXHJcblxyXG5mb3IodmFyIGtleSBpbiBtYW55d2hvLk91dGNvbWVIYW5kbGVycylcclxue1xyXG4gICAgbWFueXdoby5PdXRjb21lTWFuYWdlci5oYW5kbGVyc1trZXldID0gbWFueXdoby5PdXRjb21lSGFuZGxlcnNba2V5XTtcclxufVxyXG4gICAgXHJcbi8vIHRoaXMgYXR0YWNoZXMgdGhlIEFqYXggaGFuZGxlcnMgdG8gdGhlIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yIG9yIFxyXG4vLyBpbml0aWFsaXplIGZ1bmN0aW9uIGlmIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yIGlzbnQgZGVmaW5lZC4gIFxyXG5pZihtYW55d2hvLkN1c3RvbUNvbXBvbmVudE9yY2hlc3RyYXRvcilcclxue1xyXG4gICAgbWFueXdoby5DdXN0b21Db21wb25lbnRPcmNoZXN0cmF0b3Iub25CZWZvcmVTZW5kSGFuZGxlcnMucHVzaChPTWJlZm9yZVNlbmRIYW5kbGVyKTtcclxuICAgIG1hbnl3aG8uQ3VzdG9tQ29tcG9uZW50T3JjaGVzdHJhdG9yLmRvbmVTZW5kSGFuZGxlcnMucHVzaChPTWRvbmVIYW5kbGVyKTtcclxufVxyXG5lbHNlXHJcbntcclxuICAgIG1hbnl3aG8uc2V0dGluZ3MuaW5pdGlhbGl6ZShcclxuICAgICAgICB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGludm9rZTogXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IE9NYmVmb3JlU2VuZEhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICBkb25lOiBPTWRvbmVIYW5kbGVyICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIE9NYXV0b0Nsb3NlKG91dGNvbWUgOiBhbnksIHhociA6IGFueSwgcmVxdWVzdDogYW55KVxyXG57XHJcbiAgICB3aW5kb3cuY2xvc2UoKTtcclxuICAgIHJldHVybjtcclxufVxyXG5cclxuZnVuY3Rpb24gT01hdXRvT3BlbihvdXRjb21lIDogYW55LCB4aHIgOiBhbnksIHJlcXVlc3Q6IGFueSlcclxue1xyXG4gICAgLy90aGUgb3V0Y29tZSdzIC5wYWdlT2JqZWN0QmluZGluZ0lkIHRlbGxzIHVzIHdoaWNoIGNvbXBvbmVudCB0cmlnZ2VyZWQgdGhlIG91dGNvbWUgYW5kIGluc2VydGVkIHRoZSBkYXRhXHJcbiAgICB2YXIgdHJpZ2dlckNvbXBvbmVudD1vdXRjb21lLnBhZ2VPYmplY3RCaW5kaW5nSWQ7XHJcblxyXG4gICAgLy9nZXQgdGhlIHJlc3BvbnNlIGZvciB0aGUgY29ycmVjdCBjb21wb25lbnRcclxuICAgIHZhciByZXNwb25zZSA6IGFueTtcclxuICAgIGZvcih2YXIgcG9zID0gMCA7IHBvcyA8IHJlcXVlc3QubWFwRWxlbWVudEludm9rZVJlcXVlc3QucGFnZVJlcXVlc3QucGFnZUNvbXBvbmVudElucHV0UmVzcG9uc2VzLmxlbmd0aCA7IHBvcysrKVxyXG4gICAge1xyXG4gICAgICAgIHZhciBpdGVtID0gcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5wYWdlUmVxdWVzdC5wYWdlQ29tcG9uZW50SW5wdXRSZXNwb25zZXNbcG9zXTtcclxuICAgICAgICBpZihpdGVtLnBhZ2VDb21wb25lbnRJZCA9PT0gdHJpZ2dlckNvbXBvbmVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gaXRlbTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKHJlc3BvbnNlKVxyXG4gICAge1xyXG4gICAgICAgIHZhciB0YXJnZXRVcmkgPSByZXNwb25zZS5jb250ZW50VmFsdWU7XHJcbiAgICAgICAgdmFyIHduZCA9IHdpbmRvdy5vcGVuKHRhcmdldFVyaSwgXCJfYmxhbmtcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgYWxlcnQoXCJmYWlsZWQgdG8gZ2V0IHVyaSAtIHBhZ2VPYmplY3RCaW5kaW5nSWQgbm90IGZvdW5kIGluIHBhZ2VDb21wb25lbnRJbnB1dFJlc3BvbnNlc1wiKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gT01mb3JjZVByaW50KG91dGNvbWUgOiBhbnksIHhociA6IGFueSwgcmVxdWVzdDogYW55KVxyXG57XHJcbiAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgIHJldHVybjtcclxufVxyXG4gICAgXHJcbmZ1bmN0aW9uIE9NZG9uZUhhbmRsZXIoeGhyOiBhbnkgLCByZXF1ZXN0OiBhbnkpXHJcbntcclxuICAgIC8vY2hlY2sgY2xvc2UgZmxhZyBhbmQgaWYgc2V0IGp1c3Qga2lsbCB0aGUgd2luZG93XHJcbiAgICBpZiggbWFueXdoby5PdXRjb21lTWFuYWdlciAmJiBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZSAmJiBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZS5hdHRyaWJ1dGVzIClcclxuICAgIHtcclxuICAgICAgICAvL2xvb3Agb3ZlciBlYWNoIG91dGNvbWUgYW5kIGNhbGwgaXRzIGFzc29jaWF0ZWQgaGFuZGxlciBpbiB0aGUgcGxheWVyIGlmIGl0IGV4aXN0c1xyXG4gICAgICAgIC8vc29tZSBkZWZhdWx0IGNvbW1vbiBvbmVzIHdpbGwgZGVmYXVsdCB0byB0aGUgaGFuZGxlcnMgaW4gIGhlcmUgaWYgbm90LlxyXG4gICAgICAgIGZvciggdmFyIGtleSBpbiBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZS5hdHRyaWJ1dGVzIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmKG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuaGFuZGxlcnNba2V5XSAmJiBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZS5hdHRyaWJ1dGVzW2tleV0gPT09IFwidHJ1ZVwiKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gbWFueXdoby5PdXRjb21lTWFuYWdlci5oYW5kbGVyc1trZXldO1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5PdXRjb21lTWFuYWdlci5oYW5kbGVyc1trZXldKG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuc2VsZWN0ZWRPdXRjb21lLCB4aHIsIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIub3JpZ2luYWxSZXF1ZXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vdGhpcyBzYXZlcyB0aGUgbGFzdCBzZWxlY3RlZCBvdXRjb21lIGluIHRoZSBPdXRjb21lTWFuYWdlciAgICAgICAgICAgXHJcbmZ1bmN0aW9uIE9NYmVmb3JlU2VuZEhhbmRsZXIoeGhyOiBhbnksIHJlcXVlc3Q6IGFueSApXHJcbntcclxuICAgIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIub3JpZ2luYWxSZXF1ZXN0ICA9IHJlcXVlc3Q7XHJcbiAgICBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnN0YXRlSWQgPSByZXF1ZXN0LnN0YXRlSWQ7XHJcbiAgICB2YXIgb3V0Y29tZUlkID0gcmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5zZWxlY3RlZE91dGNvbWVJZDtcclxuICAgIGlmKG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIudGVuYW50SWQgJiYgbWFueXdoby5PdXRjb21lTWFuYWdlci5zdGF0ZUlkICYmIG91dGNvbWVJZCApXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGZsb3dLZXkgPSBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnRlbmFudElkICsgXCJfX19cIiArIG1hbnl3aG8uT3V0Y29tZU1hbmFnZXIuc3RhdGVJZDtcclxuICAgICAgICBtYW55d2hvLk91dGNvbWVNYW5hZ2VyLnNlbGVjdGVkT3V0Y29tZSA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZSggb3V0Y29tZUlkICAsICBmbG93S2V5ICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE91dGNvbWVNYW5hZ2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiBcclxue1xyXG59XHJcblxyXG5tYW55d2hvLmNvbXBvbmVudC5yZWdpc3RlcignT3V0Y29tZU1hbmFnZXInLCBPdXRjb21lTWFuYWdlcik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPdXRjb21lTWFuYWdlcjtcclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9PdXRjb21lTWFuYWdlci50c3giLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiUmVhY3RcIlxuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9